Main Topic: Read tweets and determine if the tweets are positive or negative.

Dataset: 
    Training Data - https://www.kaggle.com/kazanova/sentiment140?select=training.1600000.processed.noemoticon.csv
    Testing Data - Pulled from Twitter API, using the user's input item

Dataset Definitions:
    Training Data
        id - unique id of the tweet from Twitter
        date - timestamp when the tweet was posted
        flag - query flag, all set to NO_QUERY
        user - username of the person who posted to tweet
        text - text of the tweet

    Testing Data    
        tweet_text - text of the tweet
        tweet_sentiment - positive or negative
        location - city where the user posting is at
        user_followers_count - Number of followers the poster has
        user_friends_count - Number of friends the poster has
        user_account_age - Amount of time the account has been open on Twitter
        user_verified - Binary if the user has been verified (True) or not (False)
        user_favourites_count - Number of favorites the user has labeled
        user_tweets - Total number of tweets the user has posted
        tweet_retweeted - Binary field (True/False) showing if the post was retweeted (or shared)
        tweet_retweet_count - Number of times the tweet has been retweeted (or shared)
        tweet_favorite_count - Number of times a tweet was marked as a favorite by users
        tweet_text_length - Character count of the tweet
        tweet_text_punc_count - Count of puncuation characters used in the tweet
        
The training dataset had an initial sentiment label based on a shorthand- namely, whether the tweet contained a smiley face or sad face. Smiley face was labeled
as a positive sentiment, whereas sad face was labeled as negative.
    
Model Use: Using ML for classification of the tweets whether they are positive or negative.

User Interaction: 
    1. User enters website, and enters a word to search
    2. Taking in the user input, an API call will be made to pull a set amount of tweets from that seach.
    3. Using the ML model to classify each tweet and showcase visual charts on the website for the user.
    
Visual charts included:
    1. Pie chart break out of how the sentiments are distributed amoung the tweets.
    2. Tableau dashboard showing Training data in word clouds, bar chart by top users, and table summary.
    3. Word Cloud Comparisons of positive vs. negative tweets.
    
Pipeline:
    1. Build a classification model on Databricks (our training/test data will live in a bucket on S3).
    2. Build the website on Flask and host on Heroku. This will support the user lookup.
    3. Create visualizations dynamically using plotly or d3. Tableau for the training data since that's static.
